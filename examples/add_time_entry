#!perl
use v5.34;
use warnings;

use lib qw(lib);
use experimental qw(signatures);

use Clockify;
use Clockify::Config;
use Clockify::DateTime;

use File::Spec::Functions;
use Getopt::Long;

=head1 NAME

add_time_entry - create Clockify time entries

=head1 SYNOPSIS

	# set the environment variable for the project:
	% export CLOCKIFY_PROJECT=EXAMPLE123

	# Add an entry for today with start and end times, and message
	% add_time_entry 1230 1730 "This is what I did"

	# Add an entry for the 20th of this month, with start and end times, and message
	% add_time_entry 20T1230 1730 "This is what I did"

	# Add an entry for January 20, with start and end times, and message
	% add_time_entry 1-20T1230 1730 "This is what I did"

	# If the month is later than this month, it's last year
	% add_time_entry 12-20T1230 1730 "This is what I did"

	# use -p to add a project
	% add_time_entry -p admin 12-20T1230 1730 "This is what I did"

=head1 DESCRIPTION

=cut

use Mojo::Util qw(dumper);

run( @ARGV ) unless caller;

sub process_args ( $args ) {
	say "process_args: args are <@$args>";
	require Getopt::Long;
	Getopt::Long->import( qw(:config no_ignore_case) );

	my %o = (
		dry_run => ( $ENV{CLOCKIFY_DRY_RUN} // 0 ),
		project => ( $ENV{CLOCKIFY_PROJECT} // '' ),
		verbose => ( $ENV{CLOCKIFY_VERBOSE} // 0 ),
		version => 0,
		help    => 0,
		);

	my %description = (
		'dry_run|n'   => \$o{dry_run},
		'help|h'      => \$o{help},
		'project|p=s' => \$o{project},
		'verbose|V'   => \$o{verbose},
		'version|v'   => \$o{version},
		);

	Getopt::Long::GetOptionsFromArray( $args, %description );

	return \%o;
	}

sub handle_version () { say "Version is 0.01"; exit }
sub handle_help    () { say "Help is help";    exit }

sub run ( @args ) {
	my $options = process_args( \@args );
	my $config  = Clockify::Config->new( catfile( $ENV{HOME}, '.clockify' ) );
	handle_version() if $options->{version};
	handle_help()    if $options->{help};

	my( $start, $end, $description ) = @args;

	my $clockify = Clockify->new;
	say "Active Workspace ID: ", $clockify->user->active_workspace_id;
	say "User ID: ",             $clockify->user->id;
	say "User name: ",           $clockify->user->name;

	my %query;

	my( $date, $time );
	( $date, $time, $query{start} ) = guess_datetime( $start );
	( undef, undef, $query{end}   ) = guess_datetime( $end, $date ),
	$query{description} = $description;

	say "project is <$options->{project}>";
	@query{qw(project_id project_name task_id)} = do {
		if( $options->{project} =~ /\A[a-f0-9]{24}\z/ ) {
			my $name = $clockify->project_name_from_id( $options->{project} );
			say "Found <$name> for <$options->{project}>";
			( $options->{project}, $name, undef );
			}
		elsif( length $options->{project} ) {
			my @ids = grep { $_ } (
				$config->project_id_from_label( $options->{project} ),
				);
			my @task_id = grep { $_ } (
				$config->task_id_from_label( $options->{project} ),
				);

			say "Found id <$ids[0]> for label <$options->{project}>";
			( $ids[0], $options->{project}, $task_id[0] );
			}
		else {
			say "Getting default project";
			( $config->default_project_id, $config->default_project_name, undef );
			}
		};

	show_query( \%query );

	exit if $options->{dry_run};

	print "Proceed? ";
	my $answer = <STDIN>;
	exit unless $answer =~ /\Ay/i;

	my $result = $clockify->user->add_time_entry( \%query );
	if( $result->is_success ) {
		say <<~"HERE";
		Added entry @{[ $result->id ]}
			@{[ $result->start_date ]}
			@{[ $result->end_date ]}

			@{ [ $result->duration->{elapsed_hours} ] } hours
		HERE
		}
	else {
		say <<~"HERE";
		Error code @{[ $result->code ]}
		@{[ $result->message ]}
		HERE
		}
	}

sub show_query ( $query ) {
	printf <<~"HERE", $query->@{qw(start end project_id project_name description)};
	-------------------------
	START:       %s
	END:         %s
	PROJECT:     %s (%s)
	DESCRIPTION: %s
	-------------------------
	HERE
	}

